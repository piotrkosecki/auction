# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
h2mem1 = {
  url = "jdbc:h2:mem:test1"
  driver = org.h2.Driver
  connectionPool = disabled
  keepAliveConnection = true
}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

akka {
  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }
  actor.warn-about-java-serializer-usage=false
}

inmemory-read-journal {
    # Absolute path to the write journal plugin configuration section to get the event com.pk.auctions.adapters from
    write-plugin = "inmemory-journal"

    # there are two modes; sequence or uuid. If set to "sequence" and NoOffset will be requested, then
    # the query will return Sequence offset types. If set to "uuid" and NoOffset will be requested, then
    # the query will return TimeBasedUUID offset types. When the query is called with Sequence then
    # the query will return Sequence offset types and if the query is called with TimeBasedUUID types then
    # the query will return TimeBasedUUID offset types.
    offset-mode = "sequence"

    # ask timeout on Futures
    ask-timeout = "10s"

    # New events are retrieved (polled) with this interval.
    refresh-interval = "100ms"

    # How many events to fetch in one query (replay) and keep buffered until they
    # are delivered downstreams.
    max-buffer-size = "100"
}

inmemory-journal {

  event-adapters {
    tagging = "com.pk.auctions.adapters.EventAdapter"
  }
  event-adapter-bindings {
    "com.pk.auctions.actors.AuctionProtocol$AuctionCreated" = tagging
    "com.pk.auctions.actors.AuctionProtocol$BidAccepted" = tagging
    "com.pk.auctions.actors.AuctionProtocol$AuctionFinished" = tagging

  }
}


play.modules.enabled += "com.pk.auctions.modules.GlobalModule"
